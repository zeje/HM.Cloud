// <auto-generated />
using HM.Cloud;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace HM.Cloud.Migrations
{
    [DbContext(typeof(CloudDbContext))]
    [Migration("20180523141145_init-system")]
    partial class initsystem
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HM.Cloud.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid>("CreatorUserId");

                    b.Property<Guid?>("DepartmentId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<Guid>("ParentId");

                    b.Property<int>("Sort");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("HM.Cloud.DepartmentRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid>("CreatorUserId");

                    b.Property<Guid>("DepartmentId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("LastModifierUserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.ToTable("DepartmentRoles");
                });

            modelBuilder.Entity("HM.Cloud.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid>("CreatorUserId");

                    b.Property<Guid?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<Guid>("ParentId");

                    b.Property<Guid?>("PermissionId");

                    b.Property<int>("PermissionType");

                    b.Property<int?>("Sort");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("Permissions");

                    b.HasDiscriminator<PermissionType>("PermissionType").HasValue(PermissionType.Default);
                });

            modelBuilder.Entity("HM.Cloud.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid>("CreatorUserId");

                    b.Property<Guid?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("RoleStatus");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("HM.Cloud.RoleButton", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ButtonId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("LastModifierUserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("ButtonId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleButtons");
                });

            modelBuilder.Entity("HM.Cloud.RoleGrid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid>("CreatorUserId");

                    b.Property<Guid>("GridId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("LastModifierUserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("GridId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleGrids");
                });

            modelBuilder.Entity("HM.Cloud.RoleGridField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid>("CreatorUserId");

                    b.Property<Guid?>("GridFieldId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("LastModifierUserId");

                    b.Property<Guid>("PageId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("GridFieldId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleGridFields");
                });

            modelBuilder.Entity("HM.Cloud.RolePage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("LastModifierUserId");

                    b.Property<Guid>("PageId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePages");
                });

            modelBuilder.Entity("HM.Cloud.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ButtonId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("LastModifierUserId");

                    b.Property<Guid>("PermissionId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("ButtonId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("HM.Cloud.SoftVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Changelog");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long>("LastModifierUserId");

                    b.Property<bool>("Mandatory");

                    b.Property<string>("SoftName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("SoftVersions");
                });

            modelBuilder.Entity("HM.Cloud.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Birthday");

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid>("CreatorUserId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("IDCard")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("LastModifierUserId");

                    b.Property<int>("LoginCount");

                    b.Property<int?>("LoginFailedTimes");

                    b.Property<string>("LoginIp")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTime?>("LoginTime");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime>("PasswordSetTime");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.Property<string>("RegisterIp");

                    b.Property<DateTime>("RegisterTime");

                    b.Property<bool?>("Sex");

                    b.Property<string>("TrueName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("UserStatus");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HM.Cloud.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid>("LastModifierUserId");

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("HM.Cloud.Button", b =>
                {
                    b.HasBaseType("HM.Cloud.Permission");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.ToTable("Button");

                    b.HasDiscriminator().HasValue(PermissionType.Button);
                });

            modelBuilder.Entity("HM.Cloud.Grid", b =>
                {
                    b.HasBaseType("HM.Cloud.Permission");

                    b.Property<Guid?>("PageId");

                    b.HasIndex("PageId");

                    b.ToTable("Grid");

                    b.HasDiscriminator().HasValue(PermissionType.Grid);
                });

            modelBuilder.Entity("HM.Cloud.GridField", b =>
                {
                    b.HasBaseType("HM.Cloud.Permission");

                    b.Property<Guid?>("GridId");

                    b.HasIndex("GridId");

                    b.ToTable("GridField");

                    b.HasDiscriminator().HasValue(PermissionType.GridField);
                });

            modelBuilder.Entity("HM.Cloud.Page", b =>
                {
                    b.HasBaseType("HM.Cloud.Permission");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsVisible");

                    b.Property<Guid?>("PageId")
                        .HasColumnName("PageId1");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasIndex("PageId");

                    b.ToTable("Page");

                    b.HasDiscriminator().HasValue(PermissionType.Page);
                });

            modelBuilder.Entity("HM.Cloud.Department", b =>
                {
                    b.HasOne("HM.Cloud.Department")
                        .WithMany("SubDepartments")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("HM.Cloud.User")
                        .WithMany("Departments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HM.Cloud.DepartmentRole", b =>
                {
                    b.HasOne("HM.Cloud.Department", "Department")
                        .WithMany("DepartmentRoles")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HM.Cloud.Role", "Role")
                        .WithMany("DepartmentRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HM.Cloud.Permission", b =>
                {
                    b.HasOne("HM.Cloud.Permission")
                        .WithMany("SubPermissions")
                        .HasForeignKey("PermissionId");
                });

            modelBuilder.Entity("HM.Cloud.RoleButton", b =>
                {
                    b.HasOne("HM.Cloud.Button", "Button")
                        .WithMany()
                        .HasForeignKey("ButtonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HM.Cloud.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HM.Cloud.RoleGrid", b =>
                {
                    b.HasOne("HM.Cloud.Grid", "Grid")
                        .WithMany()
                        .HasForeignKey("GridId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HM.Cloud.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HM.Cloud.RoleGridField", b =>
                {
                    b.HasOne("HM.Cloud.GridField", "GridField")
                        .WithMany()
                        .HasForeignKey("GridFieldId");

                    b.HasOne("HM.Cloud.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HM.Cloud.RolePage", b =>
                {
                    b.HasOne("HM.Cloud.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HM.Cloud.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HM.Cloud.RolePermission", b =>
                {
                    b.HasOne("HM.Cloud.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("ButtonId");

                    b.HasOne("HM.Cloud.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HM.Cloud.UserRole", b =>
                {
                    b.HasOne("HM.Cloud.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HM.Cloud.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HM.Cloud.Grid", b =>
                {
                    b.HasOne("HM.Cloud.Page")
                        .WithMany("Grids")
                        .HasForeignKey("PageId");
                });

            modelBuilder.Entity("HM.Cloud.GridField", b =>
                {
                    b.HasOne("HM.Cloud.Grid")
                        .WithMany("GridField")
                        .HasForeignKey("GridId");
                });

            modelBuilder.Entity("HM.Cloud.Page", b =>
                {
                    b.HasOne("HM.Cloud.Page")
                        .WithMany("SubPages")
                        .HasForeignKey("PageId");
                });
#pragma warning restore 612, 618
        }
    }
}
